#!/bin/bash
# Local iOS Build Script for Development Testing

# Step 1: Get Mac's local IP
ip_address=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | head -n 1)
if [ -z "$ip_address" ]; then
  echo "‚ö†Ô∏è Could not automatically detect your Mac's IP address"
  echo "Please enter your Mac's IP address (e.g., 192.168.1.xxx):"
  read -r ip_address
  if [ -z "$ip_address" ]; then
    echo "‚ùå No IP address provided. Exiting."
    exit 1
  fi
fi

echo "‚úÖ Using Mac's IP address: $ip_address"
echo "Updating development configurations..."

# Update the local development file with the actual IP
if [ -f "client/src/utils/localDevelopment.ts" ]; then
  sed -i "" "s/192.168.1.XXX/$ip_address/g" client/src/utils/localDevelopment.ts
  echo "‚úÖ Updated client/src/utils/localDevelopment.ts with your IP: $ip_address"
fi

# Create local iOS Info.plist additions for network security
mkdir -p ios/App/App/LocalDevelopment
cat > ios/App/App/LocalDevelopment/developmentOverrides.xcconfig << EOF
// Local Development Configuration
// This file is automatically generated by build-ios-local.sh
// Changes will be overwritten

// Allow HTTP connections to local development server
CAPACITOR_SERVER_URL=http://${ip_address}:5000
CAPACITOR_SERVER_CLEARTEXT=YES
EOF

echo "‚úÖ Created iOS development configuration in ios/App/App/LocalDevelopment/"

# Step 2: Add local domain exception to iOS Info.plist for development
cat > ios/App/App/Info.plist.additions << EOF
        <key>NSAppTransportSecurity</key>
        <dict>
                <key>NSAllowsArbitraryLoads</key>
                <true/>
                <key>NSExceptionDomains</key>
                <dict>
                        <key>${ip_address}</key>
                        <dict>
                                <key>NSExceptionAllowsInsecureHTTPLoads</key>
                                <true/>
                                <key>NSIncludesSubdomains</key>
                                <true/>
                        </dict>
                </dict>
        </dict>
EOF

# Add the Info.plist additions if they don't already exist
if ! grep -q "NSAppTransportSecurity" ios/App/App/Info.plist; then
  # Insert before the closing </dict> tag
  sed -i "" "s|</dict>|$(cat ios/App/App/Info.plist.additions)\n</dict>|" ios/App/App/Info.plist
  echo "‚úÖ Added network security exceptions to Info.plist"
else
  echo "‚ÑπÔ∏è Network security exceptions already present in Info.plist"
fi

# Clean up temporary file
rm ios/App/App/Info.plist.additions

# Step 3: Build the web assets with local development configuration
echo "üî® Building web assets with local API URL..."
NODE_ENV=development VITE_MOBILE_API_URL="http://$ip_address:5000" CAPACITOR_LOCAL_URL="http://$ip_address:5000" npm run build

# Step 4: Sync with Capacitor
echo "üîÑ Syncing with Capacitor..."
CAPACITOR_LOCAL_URL="http://$ip_address:5000" npx cap sync ios

# Step 5: Open in Xcode
echo "üöÄ Opening project in Xcode..."
npx cap open ios

echo ""
echo "‚ú® Done! Now in Xcode:"
echo "1. Select your iOS device as the run target"
echo "2. Click the Build and Run button (‚ñ∂Ô∏è)"
echo ""
echo "üì± The app should connect to your local server at: http://$ip_address:5000"
echo ""
echo "‚ö†Ô∏è IMPORTANT: Make sure your iOS device is on the same network as your Mac"
echo "‚ö†Ô∏è IMPORTANT: Make sure your Mac's firewall allows incoming connections on port 5000"
echo "‚ö†Ô∏è IMPORTANT: Start your server with: npm run dev"